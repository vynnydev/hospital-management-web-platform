/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/organisms/card';
import { Button } from '@/components/ui/organisms/button';
import { Badge } from '@/components/ui/organisms/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/organisms/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/organisms/select';
import { Progress } from '@/components/ui/organisms/progress';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/organisms/dialog';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/organisms/alert';
import { Activity, AlertTriangle, BarChart, FileText, RefreshCw, ShieldAlert } from 'lucide-react';
import { useSecurityCompliance } from '@/services/hooks/security-compliance/useSecurityCompliance';
import { useToast } from '@/components/ui/hooks/use-toast';
import { Input } from '@/components/ui/organisms/input';
import { Label } from '@/components/ui/organisms/label';
import { IVulnerabilityScan } from '@/types/security-compliance-types';

import { VulnerabilityFindingsList } from './vulnerability/VulnerabilityFindingsList';
import { VulnerabilityTrendChart } from './vulnerability/VulnerabilityTrendChart';
import { VulnerabilitySummaryCards } from './vulnerability/VulnerabilitySummaryCards';

export const VulnerabilityScanTab = () => {
  const { vulnerabilityScans, fetchVulnerabilityScans, runVulnerabilityScan, loading } = useSecurityCompliance();
  const [activeScan, setActiveScan] = useState<string | null>(null);
  const [scanInProgress, setScanInProgress] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScanType, setSelectedScanType] = useState<'automated' | 'manual' | 'penetration_test'>('automated');
  const [scanToolValue, setScanToolValue] = useState('');
  const [activeTab, setActiveTab] = useState('overview');
  const { toast } = useToast();

  // Get the most recent scan
  const latestScan = vulnerabilityScans && vulnerabilityScans.length > 0 
    ? vulnerabilityScans[0] 
    : null;

  // Get the active scan details
  const selectedScan = activeScan
    ? vulnerabilityScans?.find(scan => scan.id === activeScan) || latestScan
    : latestScan;
    
  // Initialize with the latest scan id
  useEffect(() => {
    if (latestScan && !activeScan) {
      setActiveScan(latestScan.id);
    }
  }, [latestScan, activeScan]);

  // Fetch scans on component mount
  useEffect(() => {
    fetchVulnerabilityScans();
  }, [fetchVulnerabilityScans]);

  // Simulate scan progress
  useEffect(() => {
    if (scanInProgress) {
      const interval = setInterval(() => {
        setScanProgress(prev => {
          const newProgress = prev + Math.random() * 10;
          if (newProgress >= 100) {
            clearInterval(interval);
            setTimeout(() => {
              setScanInProgress(false);
              setScanProgress(0);
              fetchVulnerabilityScans();
              toast({
                title: "Scan completo",
                description: "O scan de vulnerabilidades foi concluído com sucesso.",
                variant: "default",
              });
            }, 500);
            return 100;
          }
          return newProgress;
        });
      }, 800);
      
      return () => clearInterval(interval);
    }
  }, [scanInProgress, fetchVulnerabilityScans, toast]);

  const handleStartScan = async () => {
    try {
      setScanInProgress(true);
      setScanProgress(0);
      
      // Start the scan
      await runVulnerabilityScan(selectedScanType, selectedScanType === 'automated' ? undefined : scanToolValue);
      
      toast({
        title: "Scan iniciado",
        description: `O scan de vulnerabilidades do tipo ${getScanTypeName(selectedScanType)} foi iniciado.`,
        variant: "default",
      });
    } catch (error) {
      setScanInProgress(false);
      toast({
        title: "Erro",
        description: "Ocorreu um erro ao iniciar o scan de vulnerabilidades.",
        variant: "destructive",
      });
    }
  };

  // Helper to get a human-readable scan type name
  const getScanTypeName = (type: 'automated' | 'manual' | 'penetration_test') => {
    switch (type) {
      case 'automated': return 'Automatizado';
      case 'manual': return 'Manual';
      case 'penetration_test': return 'Teste de Penetração';
      default: return type;
    }
  };

  // Calculate severity counts
  const calculateSeverityCounts = (scan: IVulnerabilityScan | null) => {
    if (!scan) return { critical: 0, high: 0, medium: 0, low: 0 };
    
    return {
      critical: scan.summary.critical,
      high: scan.summary.high,
      medium: scan.summary.medium,
      low: scan.summary.low
    };
  };

  const severityCounts = calculateSeverityCounts(selectedScan);

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
        <div>
          <h3 className="text-lg font-semibold">Scan de Vulnerabilidades</h3>
          <p className="text-sm text-gray-500">
            Identifique e corrija vulnerabilidades de segurança no sistema
          </p>
        </div>
        
        <div className="mt-2 sm:mt-0">
          <Dialog>
            <DialogTrigger asChild>
              <Button 
                className="flex items-center gap-2"
                disabled={scanInProgress || loading}
              >
                <Activity size={16} />
                Iniciar Novo Scan
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Iniciar Scan de Vulnerabilidades</DialogTitle>
                <DialogDescription>
                  Configure e inicie um novo scan de vulnerabilidades no sistema
                </DialogDescription>
              </DialogHeader>
              
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label>Tipo de Scan</Label>
                  <Select
                    value={selectedScanType}
                    onValueChange={(value: 'automated' | 'manual' | 'penetration_test') => setSelectedScanType(value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione o tipo de scan" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="automated">Scan Automatizado</SelectItem>
                      <SelectItem value="manual">Scan Manual</SelectItem>
                      <SelectItem value="penetration_test">Teste de Penetração</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                {selectedScanType !== 'automated' && (
                  <div className="space-y-2">
                    <Label>Ferramenta de Scan</Label>
                    <Input
                      value={scanToolValue}
                      onChange={(e) => setScanToolValue(e.target.value)}
                      placeholder="Nome da ferramenta utilizada"
                    />
                  </div>
                )}
                
                <Alert>
                  <AlertTriangle className="h-4 w-4" />
                  <AlertTitle>Atenção</AlertTitle>
                  <AlertDescription>
                    O scan de vulnerabilidades pode afetar temporariamente o desempenho do sistema. 
                    {selectedScanType === 'penetration_test' && ' Testes de penetração podem gerar alertas em sistemas de segurança.'}
                  </AlertDescription>
                </Alert>
              </div>
              
              <DialogFooter>
                <Button variant="ghost" onClick={() => {}}>Cancelar</Button>
                <Button onClick={handleStartScan}>Iniciar Scan</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {scanInProgress && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <RefreshCw className="h-4 w-4 animate-spin text-primary" />
                  <span className="font-medium">Scan em andamento</span>
                </div>
                <span className="text-sm">{Math.round(scanProgress)}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" />
              <p className="text-xs text-gray-500">
                {scanProgress < 30 ? 'Iniciando scan e coleta de informações...' : 
                scanProgress < 60 ? 'Identificando vulnerabilidades potenciais...' : 
                scanProgress < 90 ? 'Verificando falsos positivos...' : 
                'Finalizando e gerando relatório...'}
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {!scanInProgress && vulnerabilityScans?.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-10">
            <ShieldAlert className="h-12 w-12 text-gray-400 mb-4" />
            <h4 className="text-lg font-medium">Nenhum scan encontrado</h4>
            <p className="text-sm text-gray-500 text-center max-w-md mt-1 mb-4">
              Nenhum scan de vulnerabilidades foi executado ainda. Inicie seu primeiro scan para identificar e corrigir vulnerabilidades de segurança.
            </p>
            <Button 
              onClick={() => {}}
              className="flex items-center gap-2"
            >
              <Activity size={16} />
              Iniciar Primeiro Scan
            </Button>
          </CardContent>
        </Card>
      ) : !scanInProgress && selectedScan ? (
        <>
          <Card>
            <CardHeader className="pb-3">
              <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-3">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Activity size={18} />
                    Scan de Vulnerabilidades
                    {selectedScan.scanType === 'automated' ? (
                      <Badge variant="outline" className="ml-2">Automatizado</Badge>
                    ) : selectedScan.scanType === 'manual' ? (
                      <Badge variant="outline" className="ml-2">Manual</Badge>
                    ) : (
                      <Badge variant="outline" className="ml-2">Penetration Test</Badge>
                    )}
                  </CardTitle>
                  <CardDescription>
                    {new Date(selectedScan.scanDate).toLocaleString()} 
                    {selectedScan.conductedBy && ` • Por: ${selectedScan.conductedBy}`}
                    {selectedScan.scanTool && ` • Ferramenta: ${selectedScan.scanTool}`}
                  </CardDescription>
                </div>
                
                <div className="flex flex-wrap items-center gap-2">
                  {vulnerabilityScans && vulnerabilityScans.length > 1 && (
                    <Select
                      value={activeScan || ''}
                      onValueChange={setActiveScan}
                    >
                      <SelectTrigger className="w-[220px]">
                        <SelectValue placeholder="Selecione um scan" />
                      </SelectTrigger>
                      <SelectContent>
                        {vulnerabilityScans.map(scan => (
                          <SelectItem key={scan.id} value={scan.id}>
                            {new Date(scan.scanDate).toLocaleString()} 
                            {scan.scanType === 'automated' ? ' (Auto)' : 
                             scan.scanType === 'manual' ? ' (Manual)' : ' (Pen Test)'}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  )}
                  
                  <div className="flex items-center gap-2">
                    <Button 
                      variant={selectedScan.reportUrl ? "default" : "outline"}
                      size="sm"
                      className="whitespace-nowrap"
                      disabled={!selectedScan.reportUrl}
                    >
                      <FileText size={16} className="mr-1" />
                      Relatório Completo
                    </Button>
                  </div>
                </div>
              </div>
            </CardHeader>
            
            <CardContent className="pb-3">
              <VulnerabilitySummaryCards
                severityCounts={severityCounts}
                totalFindings={selectedScan.summary.total}
                fixedFindings={selectedScan.summary.fixed}
              />
            </CardContent>
          </Card>
          
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="overview" className="flex items-center gap-2">
                <AlertTriangle size={16} />
                <span>Vulnerabilidades</span>
              </TabsTrigger>
              <TabsTrigger value="trends" className="flex items-center gap-2">
                <BarChart size={16} />
                <span>Tendências</span>
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="overview" className="space-y-4 mt-4">
              <VulnerabilityFindingsList 
                findings={selectedScan.findings}
              />
            </TabsContent>
            
            <TabsContent value="trends" className="space-y-4 mt-4">
              <VulnerabilityTrendChart 
                scans={vulnerabilityScans || []}
              />
            </TabsContent>
          </Tabs>
        </>
      ) : (
        <Card>
          <CardContent className="flex items-center justify-center h-20">
            <RefreshCw className="h-6 w-6 animate-spin text-gray-400" />
          </CardContent>
        </Card>
      )}
    </div>
  );
};