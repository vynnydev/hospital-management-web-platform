import React, { useState } from 'react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/organisms/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/organisms/table';
import { Badge } from '@/components/ui/organisms/badge';
import { Button } from '@/components/ui/organisms/button';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/organisms/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/organisms/select';
import { Input } from '@/components/ui/organisms/input';
import { AlertTriangle, CheckCircle, Info, XCircle } from 'lucide-react';

interface Finding {
  id: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  category: string;
  description: string;
  affectedComponent: string;
  status: 'open' | 'in_progress' | 'fixed' | 'accepted_risk';
  remediation?: string;
  fixDueDate?: string;
  assignedTo?: string;
}

interface VulnerabilityFindingsListProps {
  findings: Finding[];
}

export const VulnerabilityFindingsList: React.FC<VulnerabilityFindingsListProps> = ({ findings }) => {
  const [selectedFinding, setSelectedFinding] = useState<Finding | null>(null);
  const [showDetailDialog, setShowDetailDialog] = useState(false);
  const [statusFilter, setStatusFilter] = useState<string>('');
  const [severityFilter, setSeverityFilter] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState<string>('');

  // Apply filters to the findings
  const filteredFindings = findings.filter(finding => {
    // Apply status filter
    if (statusFilter && finding.status !== statusFilter) {
      return false;
    }
    
    // Apply severity filter
    if (severityFilter && finding.severity !== severityFilter) {
      return false;
    }
    
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      return (
        finding.description.toLowerCase().includes(query) ||
        finding.category.toLowerCase().includes(query) ||
        finding.affectedComponent.toLowerCase().includes(query)
      );
    }
    
    return true;
  });

  // Helper to get severity badge
  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <Badge variant="destructive">Crítico</Badge>;
      case 'high':
        return <Badge variant="destructive" className="bg-red-500">Alto</Badge>;
      case 'medium':
        return <Badge variant="warning">Médio</Badge>;
      case 'low':
        return <Badge variant="secondary">Baixo</Badge>;
      default:
        return <Badge variant="outline">{severity}</Badge>;
    }
  };

  // Helper to get status badge
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'open':
        return <Badge variant="destructive" className="bg-red-500">Aberto</Badge>;
      case 'in_progress':
        return <Badge variant="warning" className="bg-yellow-500 text-yellow-950">Em Progresso</Badge>;
      case 'fixed':
        return <Badge variant="success" className="bg-green-500 text-green-950">Corrigido</Badge>;
      case 'accepted_risk':
        return <Badge variant="outline" className="border-blue-500 text-blue-500">Risco Aceito</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  // Helper to get status icon
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'open':
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'in_progress':
        return <Info className="h-4 w-4 text-yellow-500" />;
      case 'fixed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'accepted_risk':
        return <XCircle className="h-4 w-4 text-blue-500" />;
      default:
        return null;
    }
  };

  const handleFindingClick = (finding: Finding) => {
    setSelectedFinding(finding);
    setShowDetailDialog(true);
  };

  return (
    <>
      <Card>
        <CardHeader className="pb-2">
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2">
            <CardTitle>Vulnerabilidades Encontradas</CardTitle>
            
            <div className="flex flex-wrap items-center gap-2">
              <Input
                placeholder="Pesquisar vulnerabilidades..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="max-w-[200px]"
              />
              
              <Select
                value={severityFilter}
                onValueChange={setSeverityFilter}
              >
                <SelectTrigger className="w-[130px]">
                  <SelectValue placeholder="Severidade" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Todas</SelectItem>
                  <SelectItem value="critical">Crítico</SelectItem>
                  <SelectItem value="high">Alto</SelectItem>
                  <SelectItem value="medium">Médio</SelectItem>
                  <SelectItem value="low">Baixo</SelectItem>
                </SelectContent>
              </Select>
              
              <Select
                value={statusFilter}
                onValueChange={setStatusFilter}
              >
                <SelectTrigger className="w-[130px]">
                  <SelectValue placeholder="Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Todos</SelectItem>
                  <SelectItem value="open">Abertos</SelectItem>
                  <SelectItem value="in_progress">Em Progresso</SelectItem>
                  <SelectItem value="fixed">Corrigidos</SelectItem>
                  <SelectItem value="accepted_risk">Risco Aceito</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Severidade</TableHead>
                  <TableHead>Descrição</TableHead>
                  <TableHead className="hidden md:table-cell">Componente</TableHead>
                  <TableHead className="hidden md:table-cell">Categoria</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Ação</TableHead>
                </TableRow>
              </TableHeader>
              
              <TableBody>
                {filteredFindings.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={6} className="h-24 text-center">
                      Nenhuma vulnerabilidade encontrada com os filtros atuais.
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredFindings.map((finding) => (
                    <TableRow key={finding.id}>
                      <TableCell>
                        {getSeverityBadge(finding.severity)}
                      </TableCell>
                      <TableCell>
                        <div className="font-medium">{finding.description}</div>
                      </TableCell>
                      <TableCell className="hidden md:table-cell">
                        {finding.affectedComponent}
                      </TableCell>
                      <TableCell className="hidden md:table-cell">
                        {finding.category}
                      </TableCell>
                      <TableCell>
                        {getStatusBadge(finding.status)}
                      </TableCell>
                      <TableCell className="text-right">
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleFindingClick(finding)}
                        >
                          Detalhes
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
        
        <CardFooter className="flex justify-between">
          <div className="text-sm text-gray-500">
            Exibindo {filteredFindings.length} de {findings.length} vulnerabilidades
          </div>
          <Button variant="outline" size="sm">
            Exportar Relatório
          </Button>
        </CardFooter>
      </Card>

      {/* Finding detail dialog */}
      <Dialog open={showDetailDialog} onOpenChange={setShowDetailDialog}>
        {selectedFinding && (
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <span>Detalhes da Vulnerabilidade</span>
                {getSeverityBadge(selectedFinding.severity)}
              </DialogTitle>
              <DialogDescription>
                {selectedFinding.description}
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4 py-2">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <div>
                    <div className="text-sm font-medium text-gray-500">ID</div>
                    <div className="text-sm font-mono">{selectedFinding.id}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-medium text-gray-500">Componente Afetado</div>
                    <div className="text-sm">{selectedFinding.affectedComponent}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-medium text-gray-500">Categoria</div>
                    <div className="text-sm">{selectedFinding.category}</div>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div>
                    <div className="text-sm font-medium text-gray-500">Status</div>
                    <div className="flex items-center gap-1">
                      {getStatusIcon(selectedFinding.status)}
                      <span className="text-sm">{
                        selectedFinding.status === 'open' ? 'Aberto' :
                        selectedFinding.status === 'in_progress' ? 'Em Progresso' :
                        selectedFinding.status === 'fixed' ? 'Corrigido' : 
                        'Risco Aceito'
                      }</span>
                    </div>
                  </div>
                  
                  {selectedFinding.assignedTo && (
                    <div>
                      <div className="text-sm font-medium text-gray-500">Responsável</div>
                      <div className="text-sm">{selectedFinding.assignedTo}</div>
                    </div>
                  )}
                  
                  {selectedFinding.fixDueDate && (
                    <div>
                      <div className="text-sm font-medium text-gray-500">Prazo para Correção</div>
                      <div className="text-sm">{new Date(selectedFinding.fixDueDate).toLocaleDateString()}</div>
                    </div>
                  )}
                </div>
              </div>
              
              {selectedFinding.remediation && (
                <div className="space-y-1">
                  <div className="text-sm font-medium text-gray-500">Remediação</div>
                  <div className="text-sm p-3 bg-gray-50 rounded border">
                    {selectedFinding.remediation}
                  </div>
                </div>
              )}
              
              <div className="rounded-md border p-4 bg-gray-50">
                <div className="flex items-center mb-3">
                  <AlertTriangle className="h-5 w-5 text-yellow-500 mr-2" />
                  <h4 className="text-sm font-medium">Impacto de Segurança</h4>
                </div>
                <p className="text-sm text-gray-600">
                  Esta vulnerabilidade pode levar a {
                    selectedFinding.severity === 'critical' ? 'acesso não autorizado com privilégios elevados, permitindo controle total do sistema.' :
                    selectedFinding.severity === 'high' ? 'comprometimento significativo de dados ou funcionalidades críticas do sistema.' :
                    selectedFinding.severity === 'medium' ? 'acesso limitado a dados sensíveis ou interrupção parcial de funcionalidades.' :
                    'divulgação limitada de informações não críticas ou pequenas degradações de desempenho.'
                  }
                </p>
              </div>
            </div>
            
            <DialogFooter>
              {selectedFinding.status !== 'fixed' && (
                <div className="flex gap-2">
                  <Button variant="outline">Atualizar Status</Button>
                  <Button variant="default">Marcar como Corrigido</Button>
                </div>
              )}
              {selectedFinding.status === 'fixed' && (
                <Button variant="outline">Fechar</Button>
              )}
            </DialogFooter>
          </DialogContent>
        )}
      </Dialog>
    </>
  );
};