/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/organisms/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/organisms/tabs';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell
} from 'recharts';
import { IVulnerabilityScan } from '@/types/security-compliance-types';
import { AlertTriangle, CheckCircle, LineChart as LineChartIcon } from 'lucide-react';

// Colors for charts - keeping the same colors for light/dark mode for consistency in data visualization
const COLORS = ['#ef4444', '#f97316', '#eab308', '#22c55e'];

interface VulnerabilityTrendChartProps {
  scans: IVulnerabilityScan[];
}

export const VulnerabilityTrendChart: React.FC<VulnerabilityTrendChartProps> = ({ scans }) => {
  const [chartType, setChartType] = React.useState('line');
  
  // Format and transform data for charts
  const chartData = useMemo(() => {
    // Sort scans by date
    const sortedScans = [...scans].sort((a, b) => 
      new Date(a.scanDate).getTime() - new Date(b.scanDate).getTime()
    );
    
    return sortedScans.map(scan => ({
      name: new Date(scan.scanDate).toLocaleDateString(),
      critical: scan.summary.critical,
      high: scan.summary.high,
      medium: scan.summary.medium,
      low: scan.summary.low,
      fixed: scan.summary.fixed,
      total: scan.summary.total
    }));
  }, [scans]);
  
  // Calculate latest distribution for pie chart
  const pieData = useMemo(() => {
    if (scans.length === 0) return [];
    
    // Get the latest scan
    const latestScan = [...scans].sort((a, b) => 
      new Date(b.scanDate).getTime() - new Date(a.scanDate).getTime()
    )[0];
    
    return [
      { name: 'Crítico', value: latestScan.summary.critical },
      { name: 'Alto', value: latestScan.summary.high },
      { name: 'Médio', value: latestScan.summary.medium },
      { name: 'Baixo', value: latestScan.summary.low }
    ];
  }, [scans]);
  
  // Calculate remediation trend data
  const remediationData = useMemo(() => {
    return chartData.map(item => ({
      name: item.name,
      percentFixed: item.total > 0 ? Math.round((item.fixed / item.total) * 100) : 0,
      fixed: item.fixed,
      total: item.total
    }));
  }, [chartData]);

  // Custom tooltip for charts
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-700 rounded shadow-sm">
          <p className="font-medium text-sm text-gray-900 dark:text-white">{label}</p>
          <div className="space-y-1 mt-1">
            {payload.map((entry: any, index: number) => (
              <div key={index} className="flex items-center text-xs">
                <div 
                  className="w-3 h-3 mr-1" 
                  style={{ backgroundColor: entry.color }}
                ></div>
                <span className="font-medium text-gray-700 dark:text-gray-300">{entry.name}: </span>
                <span className="ml-1 text-gray-600 dark:text-gray-400">{entry.value}</span>
              </div>
            ))}
          </div>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="space-y-4">
      <Tabs value={chartType} onValueChange={setChartType} className="w-full">
        <TabsList className="grid w-full grid-cols-2 mb-4 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
          <TabsTrigger 
            value="line" 
            className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:text-primary dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-primary-400"
          >
            <LineChartIcon size={16} />
            <span>Tendências ao Longo do Tempo</span>
          </TabsTrigger>
          <TabsTrigger 
            value="remediation" 
            className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:text-primary dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-primary-400"
          >
            <CheckCircle size={16} />
            <span>Progresso de Remediação</span>
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="line">
          <Card className="border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
            <CardHeader>
              <CardTitle className="text-gray-900 dark:text-white">Evolução de Vulnerabilidades</CardTitle>
              <CardDescription className="text-gray-500 dark:text-gray-400">
                Tendências de vulnerabilidades por severidade ao longo do tempo
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-80">
                {chartData.length === 0 ? (
                  <div className="flex items-center justify-center h-full text-gray-400 dark:text-gray-600">
                    <div className="text-center">
                      <AlertTriangle className="h-10 w-10 mx-auto mb-2" />
                      <div>Não há dados históricos suficientes para exibir tendências</div>
                    </div>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={chartData}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#374151" strokeOpacity={0.2} />
                      <XAxis 
                        dataKey="name" 
                        stroke="#9CA3AF" 
                        tick={{ fill: '#9CA3AF' }} 
                      />
                      <YAxis 
                        stroke="#9CA3AF"
                        tick={{ fill: '#9CA3AF' }}
                      />
                      <Tooltip content={<CustomTooltip />} />
                      <Legend wrapperStyle={{ color: '#9CA3AF' }} />
                      <Line 
                        type="monotone" 
                        dataKey="critical" 
                        name="Crítico"
                        stroke="#ef4444" 
                        activeDot={{ r: 8 }} 
                        strokeWidth={2}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="high" 
                        name="Alto"
                        stroke="#f97316" 
                        activeDot={{ r: 6 }} 
                      />
                      <Line 
                        type="monotone" 
                        dataKey="medium" 
                        name="Médio"
                        stroke="#eab308" 
                      />
                      <Line 
                        type="monotone" 
                        dataKey="low" 
                        name="Baixo"
                        stroke="#22c55e" 
                      />
                    </LineChart>
                  </ResponsiveContainer>
                )}
              </div>
              
              <div className="mt-10 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="h-72">
                  <h3 className="text-base font-medium text-gray-900 dark:text-white mb-3">Distribuição Atual por Severidade</h3>
                  {pieData.length === 0 ? (
                    <div className="flex items-center justify-center h-full text-gray-400 dark:text-gray-600">
                      <div>Sem dados disponíveis</div>
                    </div>
                  ) : (
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={pieData}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                          outerRadius={80}
                          fill="#8884d8"
                          dataKey="value"
                        >
                          {pieData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip content={<CustomTooltip />} />
                      </PieChart>
                    </ResponsiveContainer>
                  )}
                </div>
                
                <div className="h-72">
                  <h3 className="text-base font-medium text-gray-900 dark:text-white mb-3">Tendência por Scan</h3>
                  {chartData.length === 0 ? (
                    <div className="flex items-center justify-center h-full text-gray-400 dark:text-gray-600">
                      <div>Sem dados disponíveis</div>
                    </div>
                  ) : (
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={chartData}
                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke="#374151" strokeOpacity={0.2} />
                        <XAxis 
                          dataKey="name" 
                          stroke="#9CA3AF" 
                          tick={{ fill: '#9CA3AF' }} 
                        />
                        <YAxis 
                          stroke="#9CA3AF" 
                          tick={{ fill: '#9CA3AF' }}
                        />
                        <Tooltip content={<CustomTooltip />} />
                        <Legend wrapperStyle={{ color: '#9CA3AF' }} />
                        <Bar dataKey="critical" name="Crítico" stackId="a" fill="#ef4444" />
                        <Bar dataKey="high" name="Alto" stackId="a" fill="#f97316" />
                        <Bar dataKey="medium" name="Médio" stackId="a" fill="#eab308" />
                        <Bar dataKey="low" name="Baixo" stackId="a" fill="#22c55e" />
                      </BarChart>
                    </ResponsiveContainer>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="remediation">
          <Card className="border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
            <CardHeader>
              <CardTitle className="text-gray-900 dark:text-white">Progresso de Remediação</CardTitle>
              <CardDescription className="text-gray-500 dark:text-gray-400">
                Acompanhamento da correção de vulnerabilidades ao longo do tempo
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-80">
                {remediationData.length === 0 ? (
                  <div className="flex items-center justify-center h-full text-gray-400 dark:text-gray-600">
                    <div className="text-center">
                      <AlertTriangle className="h-10 w-10 mx-auto mb-2" />
                      <div>Não há dados históricos suficientes para exibir tendências</div>
                    </div>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={remediationData}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#374151" strokeOpacity={0.2} />
                      <XAxis 
                        dataKey="name" 
                        stroke="#9CA3AF" 
                        tick={{ fill: '#9CA3AF' }} 
                      />
                      <YAxis 
                        yAxisId="left" 
                        domain={[0, 100]} 
                        stroke="#9CA3AF" 
                        tick={{ fill: '#9CA3AF' }} 
                      />
                      <YAxis 
                        yAxisId="right" 
                        orientation="right" 
                        stroke="#9CA3AF" 
                        tick={{ fill: '#9CA3AF' }} 
                      />
                      <Tooltip content={<CustomTooltip />} />
                      <Legend wrapperStyle={{ color: '#9CA3AF' }} />
                      <Line 
                        yAxisId="left"
                        type="monotone" 
                        dataKey="percentFixed" 
                        name="% Resolvido"
                        stroke="#22c55e" 
                        activeDot={{ r: 8 }} 
                        strokeWidth={2}
                        unit="%"
                      />
                      <Line 
                        yAxisId="right"
                        type="monotone" 
                        dataKey="fixed" 
                        name="Corrigidos"
                        stroke="#0ea5e9" 
                      />
                      <Line 
                        yAxisId="right"
                        type="monotone" 
                        dataKey="total" 
                        name="Total"
                        stroke="#9CA3AF" 
                        strokeDasharray="5 5"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                )}
              </div>
              
              <div className="mt-10 h-72">
                <h3 className="text-base font-medium text-gray-900 dark:text-white mb-3">Tendência de Correção por Scan</h3>
                {remediationData.length === 0 ? (
                  <div className="flex items-center justify-center h-full text-gray-400 dark:text-gray-600">
                    <div>Sem dados disponíveis</div>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={remediationData}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#374151" strokeOpacity={0.2} />
                      <XAxis 
                        dataKey="name" 
                        stroke="#9CA3AF" 
                        tick={{ fill: '#9CA3AF' }} 
                      />
                      <YAxis 
                        stroke="#9CA3AF" 
                        tick={{ fill: '#9CA3AF' }} 
                      />
                      <Tooltip content={<CustomTooltip />} />
                      <Legend wrapperStyle={{ color: '#9CA3AF' }} />
                      <Bar 
                        dataKey="fixed" 
                        name="Corrigidos" 
                        fill="#22c55e" 
                        stackId="a" 
                      />
                      <Bar 
                        dataKey="total" 
                        name="Pendentes" 
                        fill="#ef4444" 
                        stackId="a" 
                      />
                    </BarChart>
                  </ResponsiveContainer>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};